# 3. Осуществить программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс «Клетка». В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки
# арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()). Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и округление до целого числа деления клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# Добавить к классу метод print(columns), распечатыващий на экране звездочки
# рядами по columns звездочек в одном ряду в количестве равном числу ячеек клетки.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, если в клетке 12 ячеек, а запросили напечатать по 5 звездочек в ряду, то на экране должно быть:
#
# *****
# *****
# **

class Cell:

    def __init__(self, n):
        self.N = n

    def __add__(self, other):
        return Cell(self.N + other.N)

    def __sub__(self, other):
        if self.N < other.N:
            return "Первая клетка меньше"
        return Cell(self.N - other.N)

    def __mul__(self, other):
        return Cell(self.N * other.N)

    def __truediv__(self, other):
        return Cell(self.N // other.N)

    def print(self, columns):
        count = self.N
        buf = ''
        while True:
            buf = ''
            for i in range(columns):
                if count == 0:
                    print(buf)
                    return None
                buf += '*'
                count -= 1
            print(buf)


a = Cell(26)
b = Cell(15)
a.print(3)
print('---------')
b.print(6)
print('---------')
c = a + b
c.print(7)
print('---------')
d = a - b
d.print(3)
print('---------')
e = a * b
e.print(5)
print('---------')
f = a / b
f.print(2)
